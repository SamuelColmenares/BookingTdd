@model BookingTDD.Models.Booking

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    IEnumerable<SelectListItem> adultList = (IEnumerable<SelectListItem>)ViewBag.ListAdt ?? new List<SelectListItem>();
    IEnumerable<SelectListItem> childList = (IEnumerable<SelectListItem>)ViewBag.ListPas ?? new List<SelectListItem>();
}

<link href="~/Content/gijgo/combined/gijgo.min.css" rel="stylesheet" />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal animated">
        <br />
        <h2>Booking TDD</h2>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="form-check">
                @Html.EditorFor(model => model.IsRoudTrip)
                @Html.ValidationMessageFor(model => model.IsRoudTrip, "", new { @class = "text-danger" }) &nbsp;
                @Html.LabelFor(model => model.IsRoudTrip, htmlAttributes: new { @class = "control-label" })
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Origin, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Origin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Origin, "", new { @class = "text-danger" })

            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Destination, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Destination, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Destination, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Departure, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Departure, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Departure, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Return, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Return, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Return, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Adult, htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.Adult, adultList, new { @class = "form-control" })
                @*@Html.EditorFor(model => model.Adult, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Adult, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Child, htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.Child, childList, new { @class = "form-control" })
                @*@Html.EditorFor(model => model.Child, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Child, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Infant, htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.Infant, childList, new { @class = "form-control" })
                @*@Html.EditorFor(model => model.Infant, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Infant, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-10">
                &nbsp;
            </div>
            <div class="form-group col-md-2">
                <input type="submit" value="Create" class="btn btn-outline-primary btn-block" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval", "~/bundles/datepicker")
    <script>
        $(document).ready(function () {
            console.log("Start page");
            var initial = {
                format: 'yyyy/mm/dd',
                value: '2019/01/03',
                minDate: '2019/01/03',
                uiLibrary: 'materialdesign'
            };
            $('#Departure').datepicker(initial);
            $('#Return').datepicker(initial);
        });

        $.validator.addMethod("dategreaterthan", function (value, element, params) {
            return Date.parse(value) > Date.parse($(params).val());
        });

        $.validator.unobtrusive.adapters.add("dategreaterthan", ["otherpropertyname"], function (options) {
            options.rules["dategreaterthan"] = "#" + options.params.otherpropertyname;
            options.messages["dategreaterthan"] = options.message;
        });
    </script>
}

